Functions as defined by the author, with minor modifications for the pattern
matching to work:

convert2 :: Int -> String
convert2 = combine2 . digits2

digits2 :: Int -> (Int, Int)
digits2 n = (n `div` 10, n `mod` 10)

units :: [String]
units = ["one", "two", "three", "four", "five",
         "six", "seven", "eight", "nine"]

teens :: [String]
teens = ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]

tens :: [String]
tens = ["twenty", "thirty", "forty", "fifty", "sixty",
        "seventy", "eighty", "ninety"]

combine2 :: (Int, Int) -> String
combine2 (0, u) = units !! (u-1)
combine2 (1, u) = teens !! u
combine2 (t, 0) = tens !! (t-2)
combine2 (t, u) = tens !! (t-2) ++ "-" ++ units !! (u-1)

convert3 :: Int -> String
convert3 = combine3 . digits3

digits3 :: Int -> (Int, Int)
digits3 n = (n `div` 100, n `mod` 100)

combine3 :: (Int, Int) -> String
combine3 (0, t) = convert2 t
combine3 (h, 0) = units !! (h-1) ++ " hundred"
combine3 (h,t) = units!! (h-1) ++ " hundred and " ++ convert2 t

convert6 :: Int -> String
convert6 = combine6 . digits6

digits6 :: Int -> (Int, Int)
digits6 n = (n `div` 1000, n `mod` 1000)

combine6 :: (Int, Int) -> String
combine6 (0, h) = convert3 h
combine6 (m, 0) = convert3 m ++ " thousand"
combine6 (m, h) = convert3 m ++ " thousand" ++ link h ++ convert3 h

link :: Int -> String
link h = if h < 100 then " and " else " "
-------------------------------------------------------------------------------

5.1.1)
convert6 n = combine6 (digits6 n) ++ "."

5.1.2)
convert9 :: Int -> String
convert9 = combine9 . digits9

digits9 :: Int -> (Int, Int)
digits9 n = (n `div` 1000000, n `mod` 1000000)

combine9 :: (Int, Int) -> String
combine9 (0, h) = convert6 h
combine9 (m, 0) = convert6 m ++ " millon"
combine9 (m, h) = convert6 m ++ " millon" ++ link h ++ convert6 h

convert12 :: Int -> String
convert12 = combine12 . digits12

digits12 :: Int -> (Int, Int)
digits12 n = (n `div` 1000000000, n `mod` 1000000000)

combine12 :: (Int, Int) -> String
combine12 (0, h) = convert9 h
combine12 (m, 0) = convert9 m ++ " billon"
combine12 (m, h) = convert9 m ++ " billon" ++ link h ++ convert9 h

5.1.3)
convert12 :: Int -> String
convert12 0 = "zero"
convert12 x = if x >= 0
                 then combine12 (digits12 x)
                 else "minus " ++ combine12 (digits12 (abs x))

5.1.4)
    TODO
5.1.5)
    TODO


5.4.1) 
      (365 * x + x `div` 4 - x `div` 100 + x `div` 400 + 1) `mod` 7
  = {(a + b) mod n = [(a mod n) + (b mod n)] mod n; (a - b) mod n = [(a mod n) - (b mod n)] mod n}
      ((365 * x) `mod` 7 + (x `div` 4) `mod` 7 - (x `div` 100) `mod` 7 + (x `div` 400) `mod` 7 + 1 `mod` 7) `mod` 7
  = {(a*b) mod n = [(a mod n) * (b mod n)] mod n}
      ((365 `mod` 7 * x `mod` 7) `mod` 7 + (x `div` 4) `mod` 7 - (x `div` 100) `mod` 7 + (x `div` 400) `mod` 7 + 1 `mod` 7) `mod` 7
  = {365 mod 7 = 1, and 1 is the unit of (*)}
      ((x `mod` 7) `mod` 7 + (x `div` 4) `mod` 7 - (x `div` 100) `mod` 7 + (x `div` 400) `mod` 7 + 1 `mod` 7) `mod` 7
  = {(x mod n) mod n = x mod n}
      (x `mod` 7 + (x `div` 4) `mod` 7 - (x `div` 100) `mod` 7 + (x `div` 400) `mod` 7 + 1 `mod` 7) `mod` 7
  = {(a + b) mod n = [(a mod n) + (b mod n)] mod n; (a - b) mod n = [(a mod n) - (b mod n)] mod n}
      (x + x `div` 4 - x `div` 100 + x `div` 400 + 1) `mod` 7
